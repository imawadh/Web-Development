1. document.getElementsByClassName()  : HTMLCollection[]

How to convert HTMLCollection to Array?
Ans. arrayElements = Array.from(HtmlCollection)
    


working with iterator called "forEach"
======================================
-> It can be used only on Array object.

callbackfunction = (value,index,arr) => {
		//value 
		//index
		//arr
};
forEach( callbackfunction)

2. document.getElementsByTagName()  : HTMLCollection[]
	Another approach to convert HTMLCollection to Array
		[...HTMLCollection]


3. document.getElementsByName()     : NodeList
	While working with NodeList,directly we can use forEach() without any conversion.

4. Instead of remembering all these methods, we go for a method called 
		querySelector(cssSelector) | querySelectorAll(cssSelector)
    	to target the elements in a HTML Page.


		querySelector(cssSelector)    : Element
		querySelectorAll(cssSelector) : NodeList


FAQ: 
 a. why do we need so many methods to target HTML page using javascript ,when we can target
	directly with single method called 'querySelectorXXX()'?

Ans. Older version of javascript added methods like
		getElementById(),getElementsByClassName(),getElementsByTagName(),....
     As css become popular, to give the direct support of accessing the elements using CSS
     methods like querySelector() and querySelectorAll() were added.


	querySelector | querySelectorAll|getElementById ===> works only for staticDOM
	  getElementsByClassName() 
	  getElementsByTagName()	====> Dynamic DOM
 	  getElementsByName() 



Accessing the elements using getElementsByTagName() : HTMLCollection(Live)
=========================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>My Shopping List</h2>
    <ul id="shopping-list">
        <li>IPHONE</li>
        <li>ONEPLUS</li>
        <li>SAMSUNG</li>
    </ul>
    <button onclick="highlightItems()">Highlight Items</button>
</body>
</html>

<script type="text/javascript">
    function highlightItems(){
       let elements = document.getElementsByTagName("li")
       console.log(elements);

       console.log(elements);
       console.log(Array.from(elements))
       
       Array.from(elements).forEach((product,index,arr)=>{
            product.style.cssText = 'margin: 25px; color: green'
       })
    }
</script>



Difference b/w them with example
================================
<div id="main" class="box">
  <p class="box">Hello</p>
  <p class="box">World</p>
</div>


a. using id
const el = document.getElementById("main");
console.log(el); // <div id="main" class="box">

b. using classname
const boxes = document.getElementsByClassName("box");
console.log(boxes); // HTMLCollection(3) [div.box, p.box, p.box]

c. using querySelector()
const el = document.querySelector(".box");
console.log(el); // <div class="box">

d. using querySelectorAll()
const elList = document.querySelectorAll(".box");
console.log(elList); // NodeList(3) [div.box, p.box, p.box]

		refer chart to understand which one to use


Static vs. Dynamic DOM Access — What’s the difference?
======================================================

Static DOM Access
Happens once, at the time of accessing.

If DOM elements change later, the reference does not update.

Example: querySelectorAll() returns a NodeList, which is static.


Dynamic (Live) DOM Access
Reflects changes automatically.

If new elements are added or removed, the collection updates itself.

Example: getElementsByClassName() returns an HTMLCollection, which is live.


eg#1.
<div id="container">
  <p class="item">Item 1</p>
  <p class="item">Item 2</p>
</div>

<button onclick="addItem()">Add Item</button>

<script>
  const liveList = document.getElementsByClassName("item"); // Dynamic (live)
  const staticList = document.querySelectorAll(".item");    // Static (snapshot)

  function addItem() {
    const p = document.createElement("p");
    p.className = "item";
    p.textContent = "New Item";
    document.getElementById("container").appendChild(p);

    console.log("Live (HTMLCollection):", liveList.length);   // Updates
    console.log("Static (NodeList):", staticList.length);     // Does not update
  }
</script>



Javascript output operations
============================
 a. alert()
 b. confirm()
 c. document.write() | document.writeln()
 d. innerHTML | outerHTML
 e. innerText | outerText
 f. textContent
 g. console.XXXXX() [log(),warn(),error(),info(),debug()]



1. 
alert(msg) : void 
	It has a ok button
	It returns undefined when the user clicks ok button | presses esc keyboard
	It is used to just to display some messages.
		
Limitation
	a. No styling can be added to the Msg.
	b. No cancel button, so to come out of the actions the user should 		
		click 'esc' button.

2. 
  confirm(msg) : boolean
	It has ok and cancel button
	It returns true when user clicks on 'ok' button otherwise it returns false.

Limitation
	a. No styling can be added to the Msg.