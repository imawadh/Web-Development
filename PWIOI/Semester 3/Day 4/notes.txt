
javascript output techniques
============================
 alert()    
 confirm() 
 document.write() | document.writeln()

 1. document.write(msg)
   msg : string | html elements 



Limitation with document.write()
===============================
 => document.write() can behave unexpectedly if used after the page finishes loading.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">

        function addContent() {
            // document.writeln('Welcome to the world of Javascript!!! <br>');
            // document.writeln(" Javascript is a cool stuff....<br>");
            // document.write(" Javascript is too dangerous if we don't understand....");

            //Create an element
            h1 = document.createElement("h1"); // <h1> </h1>

	   // Adding content to the element
            h1.textContent= 'Welcome to the world of javascript'; // <h1> ... </h1>

	   //Appending as a child to body element
            document.body.appendChild(h1);

        }


    </script>
</head>
<body>
    
    <h1> Hello User </h1>

    <button type="button" onclick="addContent()">ADD CONTENT</button>


</body>
</html>


Output
======
What happens when you click the button?
The whole existing page (including the button, heading, etc.) gets wiped out.

Only the content inside document.write(...) is shown.

Why? Because once the page finishes loading, document.write() acts like:

"Let me rebuild the entire document from scratch now!"


innerHTML vs outerHTML
======================
  innerHTML : it will add the element as a child to the targeted container|element.
  outerHTML : it will replace the element with the newly provided one to the targeted container|element.

eg#1.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function deleteRecord(){
            flag = confirm("Are you sure u want to delete the Record??");
            if (flag) {
                document.querySelector("h2").outerHTML='<h3 style="color:green;">Record deleted succesfully </h3>';
            } else {
                document.querySelector("p").outerHTML = '<h2 style="color:red;"> You have pressed Cancel button </h2>';
            }
        }
    </script>
</head>
<body>
    <button onclick="deleteRecord()">Delete</button>
    <h2></h2>
    <p></p>
</body>
</html>

Output :observer the DOM by replacing innerHTML and outerHTML


innerText vs outerText
======================
 same as innerHTML and outerHTML but in case of innerText or outerText we can just present only text content not any HTML+styles.


What is the difference b/w innerText vs textContent?
Ans. 
Note: 
Use textContent when:
You want all the text (including text from hidden elements).
Performance is important, especially when you don’t need to worry about layout or CSS visibility.
You are manipulating raw text, and you don’t care about white spaces or hidden elements.

Use innerText when:
You want the visible text, and you're dealing with text that might have styling (like hidden elements or user interactions).
You need to respect CSS visibility and layout.
It’s important that the text looks like it does on screen, including white spaces and line breaks.


logs details 
============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function deleteRecord(){
            console.info('User has clicked Delete button');
            flag = confirm("Are you sure u want to delete the Record??");

            if (flag) {
                console.log("User has clicked ok button");
                document.querySelector("h2").textContent='Record deleted succesfully';
                console.log('Deleted succesfully...');
                
            } else {
                console.warn("User has clicked cancel button");
                document.querySelector("p").innerText = ' You have pressed Cancel button ';
                console.error('Operation didnot went as expected');
            }
        }
    </script>
</head>
<body>
    <button onclick="deleteRecord()">Delete</button>
    <h2></h2>
    <p></p>
</body>
</html>


Javascript input mechanism
==========================
 a. prompt()
 b. queryString
 c. formelements


prompt(): string | null

eg#1.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function createFolder(){
            input=prompt('Enter the foldername')

            if (input==null) {
                document.querySelector("h2").textContent='User has clicked on cancel button';  
            } else if(input.length==0) {
                document.querySelector("h2").textContent='Without Entering the folder name User has clicked on OK button';  
            }else{
                document.querySelector("h2").outerHTML = '<h1 style="color:green; font-family:Algerian;">
				Folder created: '+input+"</h1>";
            }
        }
    </script>
</head>
<body>
    <button onclick="createFolder()">CREATE FOLDER</button>
    <h2></h2>
</body>
</html>


2. queryString
	It is a combination of URL + queryParameters(K,V)

	To collect the queryString we use "BOM" [Browser Object Model]
		queryString = location.search;

	QueryString data would be received in the form of 'string'.
	string has various methods to process our input
		a. slice(start)
		b. indexOf('')


eg#1.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

</head>
<body>
    <form action="">
        <dl>
            <dt>Username</dt>
            <dd>
                <input type="text" name="myName">
            </dd>
            <dt>Password</dt>
        </dl>
        <button>Submit</button>
    </form>
    <script type="text/javascript">
        queryString = location.search;
        console.log(queryString);
        console.log("Input value is ::" +(queryString.slice(queryString.indexOf('=') + 1)));
    </script>
</body>
</html>