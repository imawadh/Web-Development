=================================================================================================

methods w.r.t string
    a. toUpperCase()	: string
    b. toLowerCase()	: string
    c. charAt()		: string
    d. charCodeAt()        : number
    e. indexOf()		: number
    f. slice() 		: string
    g. substring()		: string
    h. startsWith() 	: boolean
    i. endsWith()		: boolean
    k. trim()		: string
    l. split()		: string[] | null


================================================================================================
match(regEx) : array|null
	if the string matches with regEx it would return an array otherwise it would return null.

    eg#1. 
        let str='9998887776'
        let matchInput = /^\d{10}$/
        console.log(str.match(matchInput)) // [non-empty array]

        let str='999888777'
        let matchInput = /^\d{10}$/
        console.log(str.match(matchInput)) //null

        let str='9998887776'
        let matchInput = /\d{10}/
        console.log(str.match(matchInput)) //[non-empty array]

        let str='999888777'
        let matchInput = /\d{10}/
        console.log(str.match(matchInput)) //null

        let str='9998887776778'
        let matchInput = /\d{10}/
        console.log(str.match(matchInput)) //[non-empty array]

        solution :: 

            use ^ and $ symbol to ensure the matching is happening from begining to the ending of the input.
            if we don't use these symbols, then mathcing will happen by taking the part of the input supplied by the user.



================================================================================================
boolean Type ::: 

The permitted values are :: 
    a. -::>  true|false
    b. -::>  < 0    -> True
    c. -::>  = 0    -> False
    d. -::>  > 0    -> True

List few attributes which behaves like boolean value
    a. checked   
    b. readonly
    c. required
    d. disabled
    e. border 


How it works when used with '+' operator ? 
    a. if one operand is string type then perform 'concatination'	: string
    b. if both the operands are number type then it perform 'addition': number
    c  if one operand is number and other operand is of other type like boolean|null|undefined, it will convert     to number type and then perform 'Addition'. : number


    console.log(5 + 10); 			: 15(number)
    console.log(3.5 + 2.5);			: 6(number)
    console.log(-1 + 4); 			: 3(number)
    console.log("3" + 2); 			: 32(string)
    console.log(2 + "3"); 			: 23(string)
    console.log("5" + true); 		: 5true(string)
    console.log(10 + "5"); 			: 105(string)
    console.log("5" + 10); 			: 510(string)
    console.log("Result: " + 5 + 10); 	: Result : 510
    console.log(5 + 10 + " is the result"); : 15 is the result


================================================================================================================

Ternay operator
==============
   syntax:   condition ? true : false




================================================================================================================


    
Decision making operators and statements
========================================
	== 		Equal
	===		Identical Equal
	!=		Not Equal
	!==		Identical Not Equal
	>		Greater than
	<		Lesser than
	>=		Greater than or equal
	<=		Less than or equal
	&&		Logical and
	||		Logical or
	!		Not


    FAQ: What is the difference b/w == and === ? 
    Ans.  "==" compares value of different types[internally performs type conversion]
          "===" compares values of same types[ very strict no type conversion]

    eg#1. 
       2 =='2'  // true :: Number('2') : 2
       2 ==='2' //false



    FAQ: How to compare a value with regular expression?
    Ans.   By using a string method called "match()"
    		var mobile = "+91987654210";
    		var regExp = /\+91\d{10}/;

    		mobile ==  regExp     ===> invalid
    		mobile === regExp     ===> invalid
    		mobile.match(regEx)   ===> valid



    FAQ: 
        How to convert string type 'true' to boolean type true?
	    let boolType = 'true' === 'true' ? true : false;
	    console.log(boolType, typeof(boolType)); //true boolean


	
