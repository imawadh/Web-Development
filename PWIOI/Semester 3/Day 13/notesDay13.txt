=====================================================================================
Methods of string object ::
    a. toUpperCase()       : string
    b. startsWith(string)  : boolean
    c. endsWith(string)    : boolean
    d. charAt(number)      : string
    e. charCodeAt(number)  : number
    f. indexOf(string)     : number( -1 : not found , otherwise returns the index)
    g. slice([number],[number]) : string 
    h. substring([number],[number]) : string







split() --> 
    It is used to split the given string based on delimeter 
    It accepts two arguments 
        a. delimeter :: string
        b. number    :: limit (Number of elements that the split should happen)
    
    Syntax :: 
        split(string|regEx,number) : string[]



    CornerCases ::: 
        "".split()                      ==== ['']
        "".split("")                    ==== []
        "hello,User".split()            ==== ['hello,user']
        "hello,User".split(undefined)   ==== ['hello,user']
        "hello,User".split(null)        ==== ['hello,user']
        "hello,User".split('',0)        ==== []
        "P,W,,".split('')               ==== ['P','W','','']
        "P,W,".split('')                ==== ['P','W','']
        "Virat".split('')               ==== ['V','i','r','a','t']

    The array may contain fewer entries than limit if the end of the string is reached before the limit is reached.
    
    If limit is 0, [] is returned.
        
===============================================================================================
trim()
   It is used to remove trailing and leading space of the data
    e.g: 
        let str='   sachin ramesh tendulkar  '
        console.log(str,str.length) // sachin ramesh tendulkar   28


        let str='   sachin ramesh tendulkar  '
        console.log(str.length,str.trim(),str.trim().length) // 28 'sachin ramesh tendulkar' 23
    

================================================================================================================
NOTE :::
        In Javascript we can use condition statemants on Methods|properties while returns 'object|null'
        This is possible because by default js uses the following condition to process instruction ... 

            if(something!=null){
                // Truthy Values 
            }
            else{
                // Falsly Vlaues 
            }

        e.g; 

            let str = ''.someMethod(input);// object|null
            if(str){                                        ====>        if(str!=null){
                // process for true code                                 
            }                                                            }                    
            else{                                                        else{
                // process for flase code           
            }                                                            }
===============================================================================================================