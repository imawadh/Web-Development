
Functions
  a. Function declaration | function Statement
  b. function expression
  c. arrow function
  d. Anonymous function
  e. callback function [synch | asynch]

Difference b/w function expression and arrow function
 Function expression : arguments,this,constructor,
 Arrow function      : no arguments, no this, no constructor
 

callback function
=================
  It is mainly used for asynch operation
  It is the duty of the function which recieves another function as a parameter to make a call to it whenever 
  it needs.
  By default 'Synchronous'
  Solution : Use Promise

Promise
=======
 let promiseApi = new Promise(function (resolve,reject){
				if(condition){
					resolve();
				}else{
					reject();
				}		
			});


 //consuming an api
  promiseApi()
  .then(function(){
		//succesfull
	});
  .catch(function(error)){

	});
  .finally(function(){

	})

Alternative solution in ECMA+6
==============================
using async and await
=====================

function promiseApi(){
	return new Promise(function (resolve,reject){
				if(condition){
					resolve();
				}else{
					reject();
				}		
			});

}

async function consumeApi(){
	try{
	   await promiseApi();
	}catch(error){
	   
	}finally{
		
	}
}

Q> What is Exception and What is Exception handling?
Ans. Exception are runtime mistakes which happens due to faulty inputs given by the user to the application.
     Because of faulty input, the application would result in 'Abnnormal Termination'
     To resolve the problem of Abnormal temrination we use 'Exception handling mechanism'.
     Exception handling will promote 'Graceful termination of a program'
     [It would not affect OS | hardware device of the user]

Syntax: 
   try{
	//risky code
   }catch(error){
	//handling code
   }finally{
	//resource releasing code
   }

Note: Details in error object

Property	Description
=============================
name		Type of error (e.g. TypeError)
message		Description of the error
stack		Stack trace (dev info)



eg#1.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        console.log("program started the execution");
        try {
            let a = 10;
            let b = a + undeclaredVar;
            console.log(b);
        } catch (error) {
            console.log("Error Name is : ", error.name);
            console.log("Error Message is : ", error.message);
            console.log("Stack trace is : ", error.stack);
        }

        console.log("Graceful termination");

    </script>

</body>

</html>

Output: 
program started the execution
index.html:18 Error Name is :  ReferenceError
index.html:19 Error Message is :  undeclaredVar is not defined
index.html:20 Stack trace is :  ReferenceError: undeclaredVar is not defined
    at http://127.0.0.1:5500/Exception%20handling/index.html:15:25
index.html:23 Graceful termination


eg#2.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        console.log("program started the execution");

        try {
            let json = '{name: "Sachin", "age":51}';
            let user = JSON.parse(json);
            console.log(user.name);
        } catch (err) {

            console.log("Parsing error:", err.name);
        } finally {
            console.log("Execution completed");
        }


        console.log("Graceful termination");

    </script>

</body>

</html>

Output
program started the execution
 Parsing error: SyntaxError
 Execution completed
 Graceful termination


eg#3.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>


    <script>
        class DivideByZeroError extends Error {
            constructor(msg) {
                super(msg);
            }
        }
        function divide(a, b) {
            if (b === 0) {
                throw new DivideByZeroError("Can't divide by Zero");

            }
            console.log("result is : ", (a / b));
        }

        try {
            divide(10, 0);
        } catch (error) {
            console.log("Cause of Exception is : ", error.message);
        }


    </script>

</body>

</html>

Output
Cause of Exception is :  Can't divide by Zero


Usage of finally block
======================
=> It is such a block which gets executed irrespective of whether exception occurs | doesn't occurs.
=> Inside finally block we normally write the logic of closing the resources.


try{
	//risky code
}catch(error){
	//handling code
}finally{	
	//resource releasing code
}

eg#1.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script type="text/javascript">

        try {
            console.log("Connecting to database");
        } catch (error) {
            console.log("Problem of connection is resolved");
        } finally {
            console.log("Resource releasing logic");
        }

    </script>

</body>

</html>

Output
Connecting to database
Resource releasing logic

Note: All the exception in javascript belongs to 'UncheckedExceptions'

Rest operator
=============
 This operator is used to bind multiple values unders single variable

Syntax: 
   function collectData(...variable){

   }
   collectData(10,'sachin',53.5,true);

  let userData = {
		'name' : 'sachin',
		'age'  : 51,
		'gender' : 'M'
    }

  const{name,...otherDetails}=userData;


Spread Operator
===============
 => It is used spread elements into multiple values

Syntax: 
 function collectData(...variable){

   }

 let data = [10,'sachin',53.5,true];
   collectData(...data);

eg#1.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script type="text/javascript">
        let userData = [10, 'sachin', 53.5, true];
        let updatedData = [...userData, 'M'];
        console.log(updatedData);



        let obj = { 'name': 'kohli', 'age': 37, 'gender': 'M' }
        let updatedObj = { ...obj, 'name': 'viratKohli', 'isMarried': true };
        console.log(updatedObj);
    </script>
</body>

</html>

eg#2.
let obj = { 'name': 'kohli', 'age': 37, 'gender': 'M' };
        const { name, ...otherDetails } = obj;
        console.log(otherDetails);
