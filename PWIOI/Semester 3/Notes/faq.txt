
FAQ 1::: 
     1.   What is the MIME type for script?	
		Ans.    <script type='text/javascript'> :: bulk loading
			<script type='text/module'>     :: module based loading(performance is high)
		

		 2.   What is difference between script in head and body?
		Ans. head ---> script would be loaded into browser memory and later used in the page. A
		     body ---> script would be loaded directly into the page and it is not a part of browser memory.

			One more way ::: 
			 <script src="script.js" defer></script>
				defer is an HTML attribute you can add to a <script> tag to tell the browser:
				“Download this script now, but don’t run it until the HTML document has been fully parsed.”

		 3.   How JavaScript converts Static DOM into Dynamic DOM?
		Ans.      HTML -----> HTML parser ----> Static DOM
		          CSS  -----> CSS  parser ----> use static DOM and change the style of an element using CSSOM.
			  	  JS   -----> Javascript engine -----> use STATIC DOM and converts into Dynamic DOM using 'events and functions'.
		
		
		
		 4.   What is strict mode for JavaScript?
		Ans.  without declaring a variable, if we dont' want javascript to permit the usage of variables then we need to go for "strictmode"
			eg:: <script type="text/javascript">
		        		"use strict";
		        			a = 10;
		        			console.log(a); //uncaught ReferenceError : a is not defined	
		    	     </script>
		

		 5.   How to target JavaScript for Legacy browsers? [Old Version Browsers]
		Ans.  Developer can target new JavaScript code to the legacy browser by enclosing the code in HTML comments.
		
		Syntax
		<script type="text/javascirpt">
			<!--
				"use strict";
					......
					......
			-->
		</script>
		
		
		 6.   How to link external javascript file to html?
		Ans.  <script src=''>
		      </script>
FAQ 2:::
    
    -> How to convert HTMLCollection to Array?
    Ans. arrayElements = Array.from(HtmlCollection)

    a. why do we need so many methods to target HTML page using javascript ,when we can target
	directly with single method called 'querySelectorXXX()'?

    Ans. Older version of javascript added methods like
		    getElementById(),getElementsByClassName(),getElementsByTagName(),....
    
    As css become popular, to give the direct support of accessing the elements using CSS
    methods like querySelector() and querySelectorAll() were added.


	querySelector | querySelectorAll|getElementById ===> works only for staticDOM
	getElementsByClassName() 
	getElementsByTagName()	====> Dynamic DOM
 	getElementsByName() 
FAQ 3:::
	What is the difference b/w innerText vs textContent?
	Ans. 
	Note: 
	Use textContent when:
	You want all the text (including text from hidden elements).
	Performance is important, especially when you don’t need to worry about layout or CSS visibility.
	You are manipulating raw text, and you don’t care about white spaces or hidden elements.

	Use innerText when:
	You want the visible text, and you're dealing with text that might have styling (like hidden elements or user interactions).
	You need to respect CSS visibility and layout.
	It’s important that the text looks like it does on screen, including white spaces and line breaks.

	
	Javascript input mechanism
	==========================
	 a. prompt()
	 b. queryString
	 c. formelements


	Javascript object vs JSON
	 =========================

		Javascript object = { K : V}
					convert javascript object to JSON : JSON.stringify()

		JSON object       = {'K' : V}
					convert string representation JSON to javascript object  : JSON.parse()


	What If You Need Large Integers?
			If numbers exceed 53-bit precision, JavaScript introduces BigInt.
FAQ 4
	
	Binding
	=======
		  Process of attaching a variable with its value at runtime is referred as Binding.

		Databinding   : Binded the variable with value 
					eg: ${variableName}
				var userName = 'sachin'
				document.write(`${userName}`);
				document.write(`${username}`);

		stylebinding   : Process of attaching the style related details in 'Inline' manner to 
				 an element is refered as style binding.			
					eg: document.getElementById("").style.cssAttribute='cssValue'
					    document.getElementById('').style.cssText = 'cssKey: cssValue';

		classbinding   : Process of attaching the class associated with style to an element is refered
				 as classbinding.
				  eg: document.getElementById('').className = 'userDefined|library class'


	What is an Event?
		 Ans. Anything which happens on a webpage is refered as "Event".
				onclick  => When any element is clicked by the user[button].
				onchange => When the value of an element is changed by the user
				onblur   => When the element looses the focus.
				onload   => When the page is loaded by the browser.

		string formating methods
		========================
		 a. bold()  	      : string
		 b. italics()	      : string
		 c. fontsize(number)  : string
		 d. fontcolor(string) : string
		 e. toUpperCase()     : string

		document.write(str.toUpperCase().bold().fontcolor('red'));//method chaining
FAQ 5  on String 
	
	Slice in a string :::
		Note: slice(start,end)
				a. NaN  -> 0
				b. null -> 0
				c. undefined -> no parameter
				d. true      -> 1
				e. false     -> 0

	substring() : It can read the characters b/w the given index range.

			syntax: substring(startIndex,endIndex) : string  ==> endIndex can be -ve | +ve
				substring(startIndex): string 		 ==> It return from startindex to endindex-1

		eg: str.substring(7);     //from 7 till end of the String
		    str.substring(7,15);  //from 7 till 14th index of the String
		    str.substring(7,0);   //from 0 till 6th index of the String


		Parameters
		----------
		startIndex (required) – The index where extraction begins (inclusive).
		endIndex   (optional) – The index where extraction stops (exclusive). 
					If omitted, the substring extends to the end of the string.

		Key Points
		----------
		If startIndex is greater than endIndex, they are swapped.
		If startIndex or endIndex is negative or NaN, they are treated as 0.
		If endIndex is omitted, it extracts up to the end of the string.


	split() 
			-> It used to split the given string based on delimitor
			-> It accepts two arguments
					a. string   : delimitor 
					b. number   : limit

			corner cases
			=============
				"".split()			: ['']
				"".split('')                  : []
				'hello user'.split()          : ['hello user']
				'hello user'.split(undefined) : ['hello user']
				'hello user'.split(null)	: ['hello user']
				'hello user'.split('',0)	: []
				'P,W,,'.split(',')		: ['P','W','','']
				'P,W,' .split(',')            : ['P','W','']

	trim()
			It is used to remove trailing and leading space of the data

			let str='   sachin ramesh tendulkar  '
			console.log(str,str.length)
			sachin ramesh tendulkar   28


			let str='   sachin ramesh tendulkar  '
			console.log(str.length,str.trim(),str.trim().length)
			28 'sachin ramesh tendulkar' 23

	Note: 
			In javascript we can use condition statements on methods|properties which would return 'object|null'
			This is possible because by default javascript uses the following condition to process the instruction
				if(someoutput!=null)
				{
					//truthy case
				}else{
					//falsey case
				}


	Methods w.r.t to string
		a. toUpperCase()	: string
		b. toLowerCase()	: string
		c. charAt()		: string
		d. charCodeAt()        : number
		e. indexOf()		: number
		f. slice() 		: string
		g. substring()		: string
		h. startsWith() 	: boolean
		i. endsWith()		: boolean
		k. trim()		: string
		l. split()		: string[] | null

	boolean type
		============
		The permitted values are 
			a. true | false
			b.  > 0 | < 0   : true
			c.   0          : false


		List few attributes which behaves like boolean value
		a. checked   
		b. readonly
		c. required
		d. disabled
		e. border 

		how it works when used with '+' operator?
				+ :: Addition
		a. if one operand is string type then perform 'concatination'	: string
		b. if both the operands are number type then it perform 'addition': number
		c  if one operand is number and other operand is of other type like boolean|null|undefined, it will convert to number type
			and then perform 'Addition'. : number

		
		Ternay operator
		==============
		syntax:   condition ? true : false

		Decision making operators and statements
		========================================
			== 		Equal
			===		Identical Equal
			!=		Not Equal
			!==		Identical Not Equal
			>		Greater than
			<		Lesser than
			>=		Greater than or equal
			<=		Less than or equal
			&&		Logical and
			||		Logical or
			!		Not

		FAQ: What is the difference b/w == and === ? 
		Ans.  "==" compares value of different types[internally performs type conversion]
			"===" compares values of same types[ very strict no type conversion]

		eg#1. 
		2 =='2'  // true :: Number('2') : 2
		2 ==='2' //false


		FAQ: How to compare a value with regular expression?
		Ans.   By using a string method called "match()"
				var mobile = "+91987654210";
				var regExp = /\+91\d{10}/;

				mobile ==  regExp     ===> invalid
				mobile === regExp     ===> invalid
				mobile.match(regEx)   ===> valid


		FAQ: How to convert string type 'true' to boolean type true?
			let boolType = 'true' === 'true' ? true : false;
			console.log(boolType, typeof(boolType)); //true boolean



		operator
		a. ternary operator : condition ? true : false
		b. arithmetic operator : +
		c. comparison operator : == | ===


		statements
		==========
		-> Executable code which would decide the control flow of the program.
		
		conditional statements
		======================
		a. if
		b. if else
		c. nested if else
		d. switch| case | default | break
FAQ 6 should be answered properly .... 
FAQ 6

	javascript output techniques
	============================
		a. alert(string) 
		b. confirm(string) : boolean
		c. document.write(string|markup)
		d. innerHtml
		e. textContent
		f. outerText vs innerText

	javascript input elements
	==========================
		a. prompt() : string|null

	javascript targeting the elements
	==================================
		a. using id         : static
		b. using className  : dynamic
		c. using tagName    : dynamic
		d. querySelector(cssSyntax) | querySelectorAll()  : ECMA6+

	primitive types
	===============
		Memory : stack(LIFO)
		Range and size is fixed
		Immutable : can't be changed on the same memory,if we try to change the reflection not on the same memory
				but at different location.

		a. number		: IEE754 (floating point - 64bit)
						Number():: NaN|actual data : strict type
						parseInt():: NaN|actual data,parseFloat()
						toString() | toLocaleString(localetype,jsontype)
		
		b. string	         : property : length
					methods  : slice(),trim(),split(),substring(),match(),charCodeAt(),indexOf()

		c. boolean		: true |false
					0 : false , any number>0 : true
					null,undefined,"",0,NaN,0n : false
					[],"sachin",function(){},any number>0 : true

	operators
	=========
		d. null
		e. undefined
		f. BigInt
		g. Symbol

		Note: null === null (true)
			undefined === undefined (true)
			NaN === NaN (false)
			NaN == NaN   (false)
			null == undefined (true)
			null === undefined (false)

		What is the difference b/w null and undefined?
		Ans. null : runtime value
			undefined : compile time value(used by js engine)

	Logical operator
	================
		a. && , ||


	syntax:  (condition-1) && (condition-2)   
				(condition-1) || (condition-2)


		Programs
		a. Find the largest of 2 numbers
			eg: a>b       : a is greater
				otherwise : b is greater

		b. Find the largest of 3 numbers
			eg: a>b && a>c : a is greater
				b>c    : b is greater
				otherwise  : c is greater

		c. Find whether the value is in range or out of range
			eg: input to a functions : value,min,max

		Check if the triange is equilateral,issoceles or scalene
				if all 3 sides are equal    : equilateral
				if any 2 sides are matching : issoceles 
				if no sides are matching    : scalene


		switch in javascript
		====================
		if we want ceratain set of statements to be executed, where the condition is already predefined then we need to go for 'switch'


		syntax: 
		switch(type){
			case label1 : ;;;;;;;
					break;

			case label2 : ;;;;;;
					break;

			default : ;;;;;;
					break;

		};


	Note: 
		1. type will be compared in strict manner with respect to label.
				(type === label)

		2. default can be anywhere in the switch hierarchy.
		3. it gets executed when none of the labels are matching with input type.
		4. while executing any label|default ,if we don't attach break to that block then fall through would happen.
		5. for one input if we want multiple cases to execute then we use the mechanism of 'fall through'.
		6. default at max can be only one in switch statement.
		7. duplicate case labels are permitted 
		8. switch argument type can be of any type like booleam,string,number,object,function,....


		FAQ: 
		1. Can we define switch without default ? // YES
		2. Can we define default above or b/w cases? // YES
		3. Can we use case without "jump statement" in switch[break]? // YES
		4. Can we use return as a jump statement in switch?
		5. What is the difference b/w break and return ?
		6. Can we define case value as "string" or "boolean"?
		7. Can we define multiple cases for a single input?
		8. How to define a case with range of values?
FAQ 7
	javascript output techniques and input techniques
	=================================================
			prompt() : string | null
			queryString() | form elements   : string 

		a. using id : HtmlElement
			name,classname,tagName : HtmlCollection,
			querySelector : HtmlElement and querySelectorAll() : NodeList


		primitive type
		==============
		=> Immutable, Stack[LIFO]
		=> structure and range is defined

		a. number 		: IEE754 format(64bit)		
					Number() | parseInt() |parseFloat()
					toString() | toLocaleString('locale',options)
								
		b. string		: property : length
					methods  : split(),trim(),substring(),slice(),charCodeAt()
							
					
		c. boolean		: true | false
					any  number except zero: true
						truthy : " " , anynumber excluding 0, [],function
						falsy : "",NaN,0,null,undefined,0n,-0.
					
					
		d. undefined | null  : undefined : compiletime
					null     : runtime

		e. BigInt		: suffix with 'n'.
		f. Symbol

	Opertors
	========
		+ => if one of the operand is of string type then it perform concatination
			if both are number it perform addition
			if operand is of other type excluding string then first it converts to number using Number(data) 
			and performs addition

		-,*,/ -> It converts into Number(data) and performs suitable operation as per the operator.

		||, && , ? : 
		== and === 

		statements
		a. if 
		b. if else
		c. nested if else
		d. else if ladder
		e. switch


	Non primitive types
	===================
		a. Memory would be allocated in heap
		b. structure and range is not predefined
		c. Mutable : change made would be reflected in the same memory

		eg: Array , Map, Object, function(){}

	Array
	=====
		It is used to store multiple value under single variableName.
		Memory allocation need not be 'continguos' as data would be stored in the form of 'Key-Value' pair 
		and data would be accessed via 'key|index'.

	Creation phase
	==============
		let|const variable =new Array (size);  // Dynamic array
		let arr = [value1,value2,value3,value4,....]; //static array

		Note: 
		a. Inside an array we can keep any type of elements[primtive and nonprimitive]
		b. Indexing would happen internally in the form of 'string' as the index would be Key:value pair data.
		c. Array can be created in 2 ways
				1. static : let arr = [value1,....]
				2. dynamic : let arr = new Array(size);

		d. Different ways of reading an element from an array
			a. using for loop
				syntax : for(initialization ;condition ;counter){
							//read the element using index 
							array[index]
					} 

			b. using property of the array[key|index]
				syntax : for(const property in object){
						//read element using property
						object[property]
					}

			c. directly reading the value[element] from an array
				syntax : for(const element of object){
						console.log(element);
					}















1. How to read all the keys from object ?
    sol.  object.keys(objectName)

2. How to know the datatype of value in a key ?


3. How to get the count of keys in a object ?


4 . How to remove the key dynamically ? 

