var : It supports hoisting

================================================================================================================

Hoisting :
        It is a phenomenon in js where variables and functions can be used without initialisation.
        If var variable holds function expression | arrow function then such variables cann't be used without initialisation, if we try to use it, it would result in 'Type Error'.

================================================================================================================

Basics of Function :: 

Four Different Types of Function :::: 
        NO Parameter and No Return Type
        NO Parameter and Return Type
        Parameter and No Return Type
        Parameter and Return Type


    


================================================================================================================

Lexical Environment and Scope Chain :: 
        Lexical Environment  :: Memory of the container + Memory of Parent Conatiner

        Scope Chain :: It refers to chain of lexical environment to identify the variable|functions to access

        Null is is parent conatiner for any scope in term of lexical environmment.



=====================================================================================
        
var :
  It supports hoisiting with 'undefined' as the result
  Redeclaring the same variable is possible.
  Reassignment of value to a variable is possible.
  It is a function scope variable.
  It supports shadowing.
 
let : 
  It supports hoisting[Variable would be in Temporal Dead Zone: it can't be used without initializing]
  If we try to use the variable present in Temporal Dead Zone, then it would result in 
		ReferenceError : variable can't be accesed without initialization.

  redeclaring the same variable is not possible.
  Reassignment of value to a variable is possible.
  They are block scope variable [Can't be used outside the block]
  It supports shadowing[Redeclaring the same variable in different scope]


const : 
  It supports hoisting[Variable would be in Temporal Dead Zone: it can't be used without initializing]
  redeclaring the same variable is not possible
  ReAssignment of value to a varialbe is also not possible[It result in TypeError]
  They are block scope variable [Can't be used outside the block]   
  It supports shadowing[Redeclaring the same variable in different scope]

    
==================================================================================
1. location  is  part of window object.

2. If let and const are decleared in the global scope its Memory will be given in    script scope ... and when in local scope it will be block scope... 

3 . Since let supports reinitialisation and not redeclaring the variable .. sow we should use it when we need a variable for short span of time ... Most prefered in block scope ... 

4. In the script scope value of let is undeined only but it shows "value unavailable";
Code ::: 
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
        <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
        <script type="text/javascript">
            let a; // a= undefined 
            console.log(a); // undefined 
            a= 10; // a= 10
            // a will be in script scope 

            var b;
            console.log(b); // undefined 
            a= 20; // b= 20
            // b will be global scope 

            const c=30;
            console.log(c); 
            // Initially c also be undeined and it will also be in script scope 



        </script>
    </head>
    <body>



        <script src="../node_modules/jquery/dist/jquery.js"></script>
        <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    </body>
    </html>


5. If we print the function in console.log(functionName), we will only get the body of the function i.e; before or after the interpretation of the function

6. When ever a function call is made the execution move to that particular function and interprets it body ..... even if the function  is below the call of the function...

7. var supports function-scoped not blocked scoped means when we can even alter its global value within a block of code but when decleared the same variable within the function a new scope variable willbe created as local scope to that function  ... 

  1. var is Function-Scoped, Not Block-Scoped
    var ignores blocks like if, for, and while
      The only thing that creates a new scope for var is a function.

    Code ::
      var a = "Ram";        // (1) Global 'a' is declared and assigned "Ram"
      console.log(a);       // (2) Output: "Ram"

      if (true) {           // (3) 'if' block does NOT create a new scope for 'var'
          var a = "Sita";   // (4) Same global 'a' is reassigned to "Sita"
          console.log(a);   // (5) Output: "Sita"
      }

      console.log(a);       // (6) Output: "Sita" (global 'a' was modified)

      function f1() {       // (7) Function creates a new scope
          var a = "Mohan";  // (8) New local 'a' (does NOT affect global 'a')
      }

      f1();                 // (9) Runs f1(), but global 'a' remains "Sita"
      console.log(a);       // (10) Output: "Sita" (global 'a' unchanged)

8. Let :: Blocked Scope 

Code ::
    let a = "Ram";        // (1) Global-scoped 'a'
    console.log(a);       // (2) Output: "Ram"

    if (true) {           // (3) Block starts (new scope)
        let a = "Sita";   // (4) Block-scoped 'a' (different from global 'a')
        console.log(a);   // (5) Output: "Sita" (block-scoped 'a')
    }

    console.log(a);       // (6) Output: "Ram" (global 'a' unchanged)

    function f1() {       // (7) Function starts (new scope)
        let a = "Mohan";  // (8) Function-scoped 'a' (different from global 'a')
        console.log(a);   // (9) Output: "Mohan" (if called)
    }

    f1();                 // (10) Runs f1() → Output inside: "Mohan"
    console.log(a);       // (11) Output: "Ram" (global 'a' unchanged)
  

9.  Const :: Blocked Scope 

Code :: 

    const a = "Ram";      // (1) Global 'a' (cannot be reassigned)
    console.log(a);       // (2) Output: "Ram"

    if (true) {           // (3) Block starts (new scope)
        const a = "Sita"; // (4) Block-scoped 'a' (different from global 'a')
        console.log(a);   // (5) Output: "Sita"
    }

    console.log(a);       // (6) Output: "Ram" (global 'a' unchanged)

    function f1() {       // (7) Function starts (new scope)
        const a = "Mohan";// (8) Function-scoped 'a' (different from global 'a')
        console.log(a);   // (9) Output: "Mohan" (if called)
    }

    f1();                 // (10) Runs f1() → Output inside: "Mohan"
    console.log(a);       // (11) Output: "Ram" (global 'a' unchanged)

  

Temporal Dead Zone ::
  The Temporal Dead Zone (TDZ) is a behavior in JavaScript that occurs with variables declared using let and const. It refers to the period between the start of a scope and the point where the variable is declared and initialized, during which accessing the variable results in a ReferenceError.

  1. How TDZ Works
    When a JavaScript engine processes a block (or function), it hoists let and const declarations (but not their assignments).

    However, unlike var (which initializes as undefined), let and const remain uninitialized until their actual declaration line.

    If you try to access them before declaration, you get a ReferenceError.

  Code ::
    console.log(x); // undefined (var is hoisted and initialized)
    var x = 5;

    console.log(y); // ReferenceError: y is not defined (not declared at all)

    console.log(z); // ReferenceError: Cannot access 'z' before initialization (TDZ)
    let z = 10;  
  
  The Temporal Dead Zone (TDZ) is a JavaScript behavior where let and const variables are inaccessible (throwing ReferenceError) between the start of their scope and their declaration line. It helps prevent bugs by enforcing proper variable initialization before usage
  

