
variable
   It is a name given to memory location where we kept our data.
   Normally variables are used when we want to access the data mulitple lines

Variable naming rules
=====================
1.  Name must start with an alphabet or can start with _ or $.

2. _ is used for configures lot of constructs.
   _ refers that variable requires further implementation.
	var productName;  // its functionality is final
	var _productName; // Representation :: it is not yet implemented

3. Don't use special chars in variable.[Suggested by ECMA standards]

4. Name can be alpha numeric.
	var product2020;

5. Name is case sensitive.

6. Name can be max 255 chars long.

7. Avoid using single char and long variable name.

8. Avoid using keywords[Total 45 reserved words]
	var const; // invalid
	var if;   // invalid

9. Always use camelCase for name and it should speak what it is?.

	var u = "sachin"; //not a good approach
	var userName = "sachin"; //good approach


Datatypes
=========

eg#1.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <script type="text/javascript">

        let str ="Hello";
        console.log(str);
        str[0]='Y'
        console.log(str); //immutable 
        console.log(typeof str);

        let myData = 10;
        myData.id = "Roll_number";
        console.log(myData);//immutable


        let obj = {id : 10};
        console.log(obj);//mutable

        obj.name = "sachin";
        console.log(obj);//mutable

        obj.id = {country : "IND",type:"cricket"};
        console.log(obj);
        console.log(typeof obj);//mutable

        delete obj.id;
        console.log(obj);//mutable
        
        
    </script>


</head>
<body>
    
</body>
</html>


Note: 
 Javascript object vs JSON
 =========================

Javascript object = { K : V}
			convert javascript object to JSON : JSON.stringify()

JSON object       = {'K' : V}
			convert string representation JSON to javascript object  : JSON.parse()



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <script type="text/javascript">

        let user  = {id:10,name:'sachin',isMarried : true}; //javascript object
        console.log(user);
        let jsonUser = JSON.stringify(user);
        console.log(jsonUser);


        let myData='{"country" : "IND","username" : "Nitin","AccountNumber" : 9998887776}';
        console.log(myData);
        let javascriptObject = JSON.parse(myData);
        console.log(javascriptObject);
        
    </script>


</head>
<body>
    
</body>
</html>


Number
======
It represents a numeric value.
- A numeric value can be
	Signed Integer  :: -5
	Unsigned Integer::  5

	Floating Point  ::    34.30[2 integers with 2 digit fractions]
	Double          ::   420.40[more than 2 digits integer with 2 digit fractions]
	Decimal         ::  4560.448765 [more than 4 digits integer with 29 digits fractions]
	Exponent        :: 2e3 [2 x 10(3) = 2000]
        bigint 		:: 23283928354748n [ suffix it with n so during calculations if we don't want round up]

	Hexa 		:: 0f0033 [0 to f]
	Octa 		:: Oo748  [0 to 8] ----> related to memory management[caching at that time we use]
	Binary 		:: 0b1010 [0,1]



How Does JavaScript Handle Numbers?
	JavaScript uses a single Number type, which follows the IEEE 754 64-bit floating-point standard.
	The same Number type is used for both integers and floating-point values.
	Internally, JavaScript stores:
			Integers exactly (if they fit in 53 bits).
			Decimals as floating points.

	Since Number is a floating-point type, it can lead to precision issues.


eg#1. 
   console.log(0.1 + 0.2); //0.300000000002 

solution : console.log((0.1 + 0.2).toFixed(2)); // 0.30

What If You Need Large Integers?
	If numbers exceed 53-bit precision, JavaScript introduces BigInt.


eg#1.
	let a = 9007199254740991;
        let b = 9007199254740992;
        let c = 9007199254740993;

        console.log(a);
        console.log(b);
        console.log(c);
        console.log(c+1);
        console.log(a === a+1);
        console.log(c === c+1);


Output
number
number
number
number
 1.7976931348623157e+308
 9007199254740991
 a =  9007199254740991
 b =  9007199254740992
 c =  9007199254740993n
 false
 false
 false
 0.30

=====================================================================================
1. when we give nothing to prompt()::
        its default value is null ...

2. Undeined Vs Not Defined vs Null


Undefined :::
     A variable is declared but has not been assigned a value.
    A variable is declared but not assigned (let x;).
    A function does not return a value (function foo() {} → returns undefined).
    Accessing an object property that doesn’t exist (obj.nonExistent).
    An array element beyond its length (arr[10] where arr.length = 2).


Not Defined :: 
    Meaning: A variable is not declared or does not exist in the current scope.Behavior: Throws a ReferenceError when accessed.
    not defined means "variable was never declared."
    Results in a runtime ReferenceError (code stops executing).
    Fixable by declaring the variable before use.

null :::
    Meaning: An explicitly assigned value representing "no value" or "empty."
    Type: null is a primitive value (typeof null === "object", a historical bug).Intentional Use: Developers assign null to indicate the absence of an object or value.


=====================================================================================
Important Programs Output ::: 
Program 1::: 
    function add(a,b){
        console.log(a+b);
    }
    console.log(add(10,20)); // 30
    add("Sachin ","Ramesh"); '// Sachin Ramesh
    add("Virat ",18); // Virat 18


# All primitive Datatypes in JS are immutables ::: 

There are 7 primitive data in JS ::: 
    1. String: Represents textual data, e.g., "hello".
    2. Number: Represents numeric data, including integers and floating-point numbers, e.g., 10, 3.14.
    3. BigInt: Represents integers of arbitrary precision, e.g., 9007199254740991n.
    4. Boolean: Represents truth values, either true or false.
    5. Symbol: Represents a unique and immutable value, often used as object property keys.
    6. Undefined: Represents a variable that has been declared but not assigned a value.
    7. Null: Represents the intentional absence of a value.




Program 2 ::: 

    let userName = "Sachin";
    console.log(userName);
    userName[0] = 'R';
    console.log(userName);

    No New Memory is Allocated for userName[0] = 'R'
    Since strings are immutable, JavaScript does not create a new string in memory when you try to modify a character directly.

    The operation userName[0] = 'R' is simply discarded (no effect).
    Means JS Engine Silently iganores the change ... 


Primitive vs Non- primitive in Js :: 
    1. Primitive Data Types (Stored by Value)
    Characteristics:
        Stored directly in the stack (fast access).
        Immutable (cannot be modified after creation).
        Compared by value (two variables with the same value are equal).
        When assigned to a new variable, a copy of the value is created.

    e.g: 
        let a = 10;
        let b = a;
        console.log("a = "+a); // 1o
        console.log("b = "+b); // 10
        b  = 20;
        console.log("a = "+a); // 10
        console.log("b = "+b); // 20




    2. Non-Primitive Data Types (Stored by Reference)

    Characteristics:
        Stored in the heap (dynamic memory), accessed via reference (pointer). 
        Mutable (can be modified after creation).
        Compared by reference (two objects with the same content are not equal unless they reference the same memory).
        When assigned to a new variable, only the reference is copied (not the actual object).
    
    e.g:
        let obj1 = { name: "Alice" };
        let obj2 = obj1; // Copies the reference (not the object)
        console.log(obj1.name); // Alice 
        console.log(obj2.name); // Alice 
        obj2.name = "Bob";

        console.log(obj1.name); // "Bob" (changed!)
        console.log(obj2.name); // "Bob"
